"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var Dispatcher = require("flux").Dispatcher;

var EventEmitter = require("events").EventEmitter;

var Store = _interopRequire(require("./material-store.js"));

var Flux = (function (_EventEmitter) {
    function Flux() {
        _classCallCheck(this, Flux);

        this.dispatcher = new Dispatcher();
    }

    _inherits(Flux, _EventEmitter);

    _createClass(Flux, {
        _registerStore: {
            value: function _registerStore(store) {
                if (process.env.NODE_ENV !== "production") {
                    require("assert")(store instanceof Store, "The store'" + store + " is not instance of material-store.\n" + "import {Store} from \"material-flux\"" + "class UserStore extends Store{ ... }");
                }
                var token = this.dispatcher.register(store.handler.bind(store));
                store._waitFor = this.waitFor.bind(this);
                store._token = token;
            }
        },
        dispatch: {
            value: function dispatch(eventKey) {
                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                }

                this.dispatcher.dispatch({
                    eventKey: eventKey,
                    args: args
                });
                this.emit("dispatch", { eventKey: eventKey, args: args });
            }
        },
        waitFor: {
            value: function waitFor(tokensOrStores) {
                if (!Array.isArray(tokensOrStores)) {
                    tokensOrStores = [tokensOrStores];
                }
                var ensureIsToken = function (tokenOrStore) {
                    return tokenOrStore instanceof Store ? tokenOrStore._token : tokenOrStore;
                };
                var tokens = tokensOrStores.map(ensureIsToken);
                this.dispatcher.waitFor(tokens);
            }
        }
    });

    return Flux;
})(EventEmitter);

module.exports = Flux;
// LICENSE : MIT
//# sourceMappingURL=material-flux.js.map