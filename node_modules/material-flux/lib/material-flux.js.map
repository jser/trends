{"version":3,"sources":["../src/material-flux.js"],"names":[],"mappings":";;;;;;;;;;IAES,UAAU,WAAQ,MAAM,EAAxB,UAAU;;IACX,YAAY,WAAO,QAAQ,EAA3B,YAAY;;IACb,KAAK,2BAAM,qBAAqB;;IAGjC,IAAI;AACK,aADT,IAAI,GACQ;8BADZ,IAAI;;AAEF,YAAI,CAAC,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;KACtC;;cAHC,IAAI;;iBAAJ,IAAI;AAKN,sBAAc;mBAAA,wBAAC,KAAK,EAAE;AAClB,oBAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACvC,2BAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,YAAY,KAAK,EACpC,eAAa,KAAK,oFACqB,yCACC,CAC3C,CAAC;iBACL;AACD,oBAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAChE,qBAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzC,qBAAK,CAAC,MAAM,GAAG,KAAK,CAAC;aACxB;;AAED,gBAAQ;mBAAA,kBAAC,QAAQ,EAAW;kDAAN,IAAI;AAAJ,wBAAI;;;AACtB,oBAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;AACrB,4BAAQ,EAAR,QAAQ;AACR,wBAAI,EAAJ,IAAI;iBACP,CAAC,CAAC;AACH,oBAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAC,QAAQ,EAAR,QAAQ,EAAE,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;aAC3C;;AAED,eAAO;mBAAA,iBAAC,cAAc,EAAE;AACpB,oBAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;AAChC,kCAAc,GAAG,CAAC,cAAc,CAAC,CAAC;iBACrC;AACD,oBAAI,aAAa,GAAG,UAAA,YAAY,EAAI;AAChC,2BAAO,YAAY,YAAY,KAAK,GAC9B,YAAY,CAAC,MAAM,GACnB,YAAY,CAAC;iBACtB,CAAC;AACF,oBAAI,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC/C,oBAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aACnC;;;;WArCC,IAAI;GAAS,YAAY;;iBAAzB,IAAI","file":"src/material-flux.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { Dispatcher } from 'flux';\nimport {EventEmitter} from 'events';\nimport Store from './material-store.js';\n\nexport default\nclass Flux extends EventEmitter {\n    constructor() {\n        this.dispatcher = new Dispatcher();\n    }\n\n    _registerStore(store) {\n        if (process.env.NODE_ENV !== 'production') {\n            require(\"assert\")(store instanceof Store,\n                `The store'${store} is not instance of material-store.\\n`\n                + `import {Store} from \"material-flux\"`\n                + `class UserStore extends Store{ ... }`\n            );\n        }\n        let token = this.dispatcher.register(store.handler.bind(store));\n        store._waitFor = this.waitFor.bind(this);\n        store._token = token;\n    }\n\n    dispatch(eventKey, ...args) {\n        this.dispatcher.dispatch({\n            eventKey,\n            args\n        });\n        this.emit('dispatch', {eventKey, args});\n    }\n\n    waitFor(tokensOrStores) {\n        if (!Array.isArray(tokensOrStores)) {\n            tokensOrStores = [tokensOrStores];\n        }\n        let ensureIsToken = tokenOrStore => {\n            return tokenOrStore instanceof Store\n                ? tokenOrStore._token\n                : tokenOrStore;\n        };\n        let tokens = tokensOrStores.map(ensureIsToken);\n        this.dispatcher.waitFor(tokens);\n    }\n}"]}