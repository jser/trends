// LICENSE : MIT
"use strict";
Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _flux = require('flux');

var _events = require('events');

var _materialStoreJs = require('./material-store.js');

var _materialStoreJs2 = _interopRequireDefault(_materialStoreJs);

var Context = (function (_EventEmitter) {
    _inherits(Context, _EventEmitter);

    function Context() {
        _classCallCheck(this, Context);

        _EventEmitter.call(this);
        this.dispatcher = new _flux.Dispatcher();
        this._stores = [];
    }

    Context.prototype._registerStore = function _registerStore(store) {
        if (process.env.NODE_ENV !== 'production') {
            require("assert")(store instanceof _materialStoreJs2['default'], 'The store\'' + store + ' is not instance of material-store.\n' + 'import {Store} from "material-flux"' + 'class UserStore extends Store{ ... }');
        }
        // guard for duplicated register
        if (this._stores.indexOf(store) >= 0) {
            return;
        }

        var token = this.dispatcher.register(store.handler.bind(store));
        store._waitFor = this.waitFor.bind(this);
        store._token = token;
        this._stores.push(store);
    };

    Context.prototype.dispatch = function dispatch(eventKey) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        this.dispatcher.dispatch({
            eventKey: eventKey,
            args: args
        });
        this.emit('dispatch', { eventKey: eventKey, args: args });
    };

    Context.prototype.waitFor = function waitFor(tokensOrStores) {
        if (!Array.isArray(tokensOrStores)) {
            tokensOrStores = [tokensOrStores];
        }
        var ensureIsToken = function ensureIsToken(tokenOrStore) {
            return tokenOrStore instanceof _materialStoreJs2['default'] ? tokenOrStore._token : tokenOrStore;
        };
        var tokens = tokensOrStores.map(ensureIsToken);
        this.dispatcher.waitFor(tokens);
    };

    return Context;
})(_events.EventEmitter);

exports['default'] = Context;
module.exports = exports['default'];
//# sourceMappingURL=material-context.js.map