{"version":3,"sources":["../../src/algo/binary-search.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;qBAcW,YAAY;;;;;;;;;;;;;;;AAArB,SAAS,YAAY,CAAC,KAAK,EAAE,MAAM,EAA8B;QAA5B,SAAS,gCAAG,cAAc;;AAC1E,QAAI,CAAC,GAAG,CAAC,CAAC;AACV,QAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACzB,WAAO,CAAC,IAAI,CAAC,EAAE;AACX,YAAI,CAAC,GAAG,AAAC,CAAC,GAAG,CAAC,IAAK,CAAC,CAAC;AACrB,YAAI,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,YAAI,GAAG,GAAG,CAAC,EAAE;AACT,aAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACb,MAAM,IAAI,GAAG,GAAG,CAAC,EAAE;AAChB,aAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACb,MAAM;AACH,mBAAO,CAAC,CAAC;SACZ;KACJ;AACD,WAAO,CAAC,CAAC,GAAG,CAAC,CAAC;CACjB;;AAED,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,WAAO,CAAC,GAAG,CAAC,CAAC;CAChB","file":"binary-search.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n * Binary search in JavaScript.\n * Returns the index of of the element in a sorted array or (-n-1) where n is the insertion point for the new element.\n * Parameters:\n *     ar - A sorted array\n *     el - An element to search for\n *     compare_fn - A comparator function. The function takes two arguments: (a, b) and returns:\n *        a negative number  if a is less than b;\n *        0 if a is equal to b;\n *        a positive number of a is greater than b.\n * The array may contain duplicate elements. If there are more than one equal elements in the array,\n * the returned value can be the index of any one of the equal elements.\n */\nexport default function binarySearch(array, target, compareFn = compare_number) {\n    var m = 0;\n    var n = array.length - 1;\n    while (m <= n) {\n        var k = (n + m) >> 1;\n        var cmp = compareFn(target, array[k]);\n        if (cmp > 0) {\n            m = k + 1;\n        } else if (cmp < 0) {\n            n = k - 1;\n        } else {\n            return k;\n        }\n    }\n    return -m - 1;\n}\n\nfunction compare_number(a, b) {\n    return a - b;\n}"]}