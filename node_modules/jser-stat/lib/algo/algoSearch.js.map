{"version":3,"sources":["../../src/algo/algoSearch.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;QAEG,kBAAkB,GAAlB,kBAAkB;QAKlB,mBAAmB,GAAnB,mBAAmB;QAcnB,iBAAiB,GAAjB,iBAAiB;;;;4BApBR,cAAc;;;;AAChC,SAAS,kBAAkB,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE;AAC1D,QAAI,SAAS,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;AACpC,QAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;AAChC,WAAO,0BAAa,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;CACxD;;AACM,SAAS,mBAAmB,CAAC,KAAK,EAAE,IAAI,EAAE;AAC7C,QAAI,YAAY,GAAG,CAAC,CAAC;AACrB,SAAK,IAAI,CAAC,GAAG,YAAY,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC9C,YAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B,YAAI,IAAI,IAAI,YAAY,EAAE;AACtB,wBAAY,GAAG,CAAC,CAAC;SACpB,MAAM;;AAEH,mBAAO,YAAY,CAAC;SACvB;KACJ;AACD,WAAO,CAAC,CAAC,CAAA;CACZ;;AAEM,SAAS,iBAAiB,CAAC,KAAK,EAAE,IAAI,EAAE;AAC3C,QAAI,YAAY,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACpC,SAAK,IAAI,CAAC,GAAG,YAAY,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AACpC,YAAI,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B,YAAI,IAAI,GAAG,YAAY,EAAE;AACrB,wBAAY,GAAG,CAAC,CAAC;SACpB,MAAM;;AAEH,mBAAO,YAAY,CAAC;SACvB;KACJ;AACD,WAAO,CAAC,CAAC,CAAC;CACb;;AAED,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,WAAO,CAAC,GAAG,CAAC,CAAC;CAChB","file":"algoSearch.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport binarysearch from \"binarysearch\"\nexport function findIndexesBetween(times, beginDate, endDate) {\n    var beginTime = beginDate.getTime();\n    var endTime = endDate.getTime();\n    return binarysearch.range(times, beginTime, endTime);\n}\nexport function findIndexBiggerTime(array, time) {\n    var currentIndex = 0;\n    for (var i = currentIndex; i < array.length; i++) {\n        var comparedTime = array[i];\n        if (time >= comparedTime) {\n            currentIndex = i;\n        } else {\n            // timeより大きいものが出てきたら直前のものを返す\n            return currentIndex;\n        }\n    }\n    return -1\n}\n\nexport function findIndexLessTime(array, time) {\n    var currentIndex = array.length - 1;\n    for (var i = currentIndex; i >= 0; i--) {\n        var comparedTime = array[i];\n        if (time < comparedTime) {\n            currentIndex = i;\n        } else {\n            // timeよりも小さいものが出てきたら直前のものを返す\n            return currentIndex;\n        }\n    }\n    return -1;\n}\n\nfunction compare_number(a, b) {\n    return a - b;\n}"]}