// LICENSE : MIT
"use strict";
exports.__esModule = true;
exports.findIndexesBetween = findIndexesBetween;
exports.findIndexBiggerTime = findIndexBiggerTime;
exports.findIndexLessTime = findIndexLessTime;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _binarysearch = require("binarysearch");

var _binarysearch2 = _interopRequireDefault(_binarysearch);

function findIndexesBetween(times, beginDate, endDate) {
    var beginTime = beginDate.getTime();
    var endTime = endDate.getTime();
    return _binarysearch2["default"].range(times, beginTime, endTime);
}

function findIndexBiggerTime(array, time) {
    var currentIndex = 0;
    for (var i = currentIndex; i < array.length; i++) {
        var comparedTime = array[i];
        if (time >= comparedTime) {
            currentIndex = i;
        } else {
            // timeより大きいものが出てきたら直前のものを返す
            return currentIndex;
        }
    }
    return -1;
}

function findIndexLessTime(array, time) {
    var currentIndex = array.length - 1;
    for (var i = currentIndex; i >= 0; i--) {
        var comparedTime = array[i];
        if (time < comparedTime) {
            currentIndex = i;
        } else {
            // timeよりも小さいものが出てきたら直前のものを返す
            return currentIndex;
        }
    }
    return -1;
}

function compare_number(a, b) {
    return a - b;
}
//# sourceMappingURL=algoSearch.js.map