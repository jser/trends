// LICENSE : MIT
"use strict";

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }

var fs = require("fs");
var path = require("path");
var http = require("http");
var URLMap = require("./url-mapping");
function getURLAsync(URL) {
    return new Promise(function (resolve, reject) {
        http.get(URL, function (res) {
            var body = "";
            res.setEncoding("utf8");

            res.on("data", function (chunk) {
                body += chunk;
            });
            res.on("end", function (res) {
                resolve(String(body));
            });
        }).on("error", function (e) {
            reject("Got error: " + e.message);
        });
    });
}

var posts = getURLAsync(URLMap.posts.json);
var items = getURLAsync(URLMap.items.json);
Promise.all([posts, items]).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var posts = _ref2[0];
    var items = _ref2[1];

    fs.writeFileSync(path.join(__dirname, "posts.json"), posts, "utf-8");
    fs.writeFileSync(path.join(__dirname, "items.json"), items, "utf-8");
})["catch"](console.error.bind(console));
//# sourceMappingURL=install-hook.js.map