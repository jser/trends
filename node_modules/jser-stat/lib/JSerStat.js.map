{"version":3,"sources":["../src/JSerStat.js"],"names":[],"mappings":"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","file":"JSerStat.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nrequire('array.prototype.find');\n\nimport Item from \"./models/JSerItem\"\nimport Post from \"./models/JSerPost\"\nimport Week from \"./models/JSerWeek\"\nimport AlgoItem from \"./algo/AlgoItem\"\nimport AlgoPost from \"./algo/AlgoPost.js\"\nimport NaturalSearcher from \"./natural/NaturalSearcher\"\nfunction filterJSerCategory(article) {\n    return /jser/i.test(article.category);\n}\nexport default class JSerStat {\n    constructor(rawItems, rawPosts) {\n        this._rawItems = rawItems ;\n        this._rawPosts = rawPosts;\n        /** @type {JSerItem[]} */\n        this.items = this._rawItems.map(function (item) {\n            return new Item(item);\n        });\n        // JSer カテゴリだけにする\n        /** @type {JSerPost[]} */\n        this.posts = this._rawPosts.filter(filterJSerCategory).map((post, index) => {\n            return new Post(index + 1, post);\n        });\n        /**\n         *\n         * @type {JSerWeek[]}\n         * @private\n         */\n        this._weeks = [];\n        /**\n         *  @type {AlgoItem}\n         *  @private\n         **/\n        this._algoItem = new AlgoItem(this.items);\n        /**\n         * @type {AlgoPost}\n         * @private\n         */\n        this._algoPost = new AlgoPost(this.posts);\n        /**\n         * @type {NaturalSearcher}\n         */\n        this.naturalSearch = null;\n    }\n\n    /**\n     * 全部で何週あるかを返す(投稿記事の数と一致)\n     * @returns {number}\n     */\n    getTotalWeekCount() {\n        return this.posts.length;\n    }\n\n    /**\n     * beginからendの範囲のJSerItemの配列を返す\n     * @param {Date} beginDate\n     * @param {Date} endDate\n     * @returns {JSerItem[]}\n     */\n    findItemsBetween(beginDate, endDate) {\n        return this._algoItem.findItemsBetween(beginDate, endDate);\n    }\n\n    // deprecated\n    getItemsBetWeen(beginDate, endDate) {\n        return this.findItemsBetween(beginDate, endDate)\n    }\n\n    /**\n     * 全てのJSerWeekの配列を返す\n     * @returns {JSerWeek[]}\n     */\n    getJSerWeeks() {\n        if (this._weeks.length === 0) {\n            this._weeks = this.posts.reduce((results, currentPost, index)=> {\n                var prevPost = this.posts[index - 1];\n                var jserWeek = new Week(currentPost, prevPost, this._algoItem);\n                results.push(jserWeek);\n                return results;\n            }, []);\n        }\n        return this._weeks;\n    }\n\n    /**\n     * beginからendの範囲のJSerWeekの配列を返す\n     * @param {Date} beginDate\n     * @param {Date} endDate\n     * @returns {JSerWeek[]}\n     */\n    findJSerWeeksBetween(beginDate, endDate) {\n        var algoPost = this._algoPost;\n        var posts = algoPost.findPostsBetween(beginDate, endDate);\n        return posts.reduce((results, currentPost, index)=> {\n            var prevPost = this.posts[index - 1];\n            var jserWeek = new Week(currentPost, prevPost, this._algoItem);\n            results.push(jserWeek);\n            return results;\n        }, []);\n    }\n\n    // deprecated\n    getJSerWeeksBetWeen(beginDate, endDate) {\n        return this.findJSerWeeksBetween(beginDate, endDate)\n    }\n\n    /**\n     * JSer.info #xxx を返す\n     * @param {number} number number start with 1\n     * @returns {JSerWeek}\n     */\n    findJSerWeek(number) {\n        if (number <= 0) {\n            throw new Error(`number:${number} should be >= 1`);\n        }\n        if (number > this.posts.length) {\n            return null;\n        }\n        var targetPost = this.posts[number - 1];\n        var prevPost = this.posts[number - 2];\n        return new Week(targetPost, prevPost, this._algoItem);\n    }\n\n    // deprecated\n    getJSerWeek(number) {\n        return this.findJSerWeek(number);\n    }\n\n    /**\n     * JSerItemを含んでいるJSerWeekを検索して返す.\n     * @param {Object} jserItem the jserItem is raw object for JSerItem\n     * @return {JSerWeek|null} The week contain this jserItem.\n     * 未来の記事などJSerWeekに所属していない場合もある\n     */\n    findWeekWithItem(jserItem) {\n        var targetItem = new Item(jserItem);\n        var tenDaysAfter = new Date(targetItem.date);\n        tenDaysAfter.setDate(targetItem.date.getDate() + 12);\n        var jSerWeeks = this.findJSerWeeksBetween(targetItem.date, tenDaysAfter);\n        return jSerWeeks.find(week => {\n            if (week.post.date < targetItem.date) {\n                return false;\n            }\n            return week.items.some(item => {\n                return targetItem.isEqualItem(item);\n            });\n        });\n    }\n\n    /**\n     * URLとマッチするJSerItemを返す\n     * @param {string} URL\n     * @return {JSerItem}\n     */\n    findItemWithURL(URL) {\n        return this.items.find(item => {\n            return item.url === URL;\n        });\n    }\n\n    /**\n     * `item` と関連するJSerItemの配列を返す\n     * @param {JSerItem} item\n     * @param {number} limit\n     * @returns {JSerItem[]}\n     */\n    findRelatedItems(item, limit = 10) {\n        if (this.naturalSearch == null) {\n            this.naturalSearch = new NaturalSearcher(this.items);\n        }\n        return this.naturalSearch.findRelatedItems(item, limit);\n    }\n}"]}