{"version":3,"sources":["../../src/natural/NaturalSearcher.js"],"names":[],"mappings":"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","file":"NaturalSearcher.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst TfIdf = require(\"natural/lib/natural/tfidf/tfidf\");\n// merge sort\nlet mergeSort = (arr) => {\n    if (arr.length < 2) {\n        return arr;\n    }\n\n    let middle = parseInt(arr.length / 2),\n        left = arr.slice(0, middle),\n        right = arr.slice(middle);\n\n    return merge(mergeSort(left), mergeSort(right));\n};\n\nlet merge = (left, right) => {\n    let result = [];\n\n    while (left.length && right.length) {\n        right[0].measure <= left[0].measure ?\n        result.push(left.shift()) :\n        result.push(right.shift());\n    }\n\n    while (left.length) {\n        result.push(left.shift());\n    }\n    while (right.length) {\n        result.push(right.shift());\n    }\n\n    return result;\n};\nvar ignoreWord = function (word) {\n    if (word.length <= 1) {\n        return false;\n    }\n    // 数字と.のみは除外\n    if (/^v?[\\d\\.]+$/.test(word)) {\n        return false;\n    }\n    if (/[\\?&=]/.test(word)) {\n        return false\n    }\n    if (/^\\.(html|md|php)$/i.test(word)) {\n        return false\n    }\n    return true;\n};\nfunction urlToWords(url) {\n    var pathList = url.split(\"/\");\n    var pathNames = pathList[pathList.length - 1].split(/([-_]|\\.html$|\\.md$|\\.php$|#)/i);\n    return pathNames.filter(ignoreWord);\n\n}\nexport default class NaturalSearcher {\n    constructor(items) {\n        this.items = items;\n        this.tfidf = new TfIdf();\n        this.addItemsAsDocuments(this.items);\n    }\n\n    addItemsAsDocuments(items) {\n        items.forEach((item) => {\n            var urlKeyString = urlToWords(item.url).join(\" \");\n            var relatedString = item.relatedLinks.map(function (relatedObject) {\n                return relatedObject.title + \" \" + urlToWords(relatedObject.url).join(\" \")\n            }).join(\"\");\n            var tagsString = (item.tags || []).join(\" \");\n            // 全部を使うと長すぎるコンテンツが有利になりすぎるので絞る\n            var slicedContent = item.content.slice(0, 200);\n            this.tfidf.addDocument(item.title + \"\\n\" + tagsString + \"\\n\" + slicedContent + \"\\n\" + urlKeyString + \"\\n\" + relatedString);\n        });\n    }\n\n    /**\n     *\n     * @param {JSerItem} targetItem\n     * @param {number} limit\n     */\n    findRelatedItems(targetItem, limit) {\n        var targetIndex = this.items.indexOf(targetItem);\n        if (targetIndex === -1) {\n            this.items.some(function (item, index) {\n                if (item.isEqualItem(item)) {\n                    targetIndex = index;\n                    return true;\n                }\n            });\n            if (targetIndex === -1) {\n                throw new Error(\"Not found this item: \" + targetItem);\n            }\n        }\n        var terms = this.tfidf.listTerms(targetIndex);\n        var results = [];\n        this.tfidf.tfidfs(terms.map(function (term) {\n            return term.term\n        }), function (i, measure) {\n            results.push({\n                index: i,\n                measure: measure\n            });\n        });\n        var sorted = mergeSort(results);\n        // tifidf -> item\n        var matchItems = [];\n        for (var i = 0, len = Math.min(sorted.length, limit + 1); i < len; i++) {\n            // 自分自身は含めない\n            let matchItem = this.items[sorted[i].index];\n            if (this.items[targetIndex].isEqualItem(matchItem)) {\n                continue;\n            }\n            matchItems.push(matchItem);\n        }\n        return matchItems;\n    }\n}"]}