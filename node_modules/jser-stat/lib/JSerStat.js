// LICENSE : MIT
"use strict";
exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _modelsJSerItem = require("./models/JSerItem");

var _modelsJSerItem2 = _interopRequireDefault(_modelsJSerItem);

var _modelsJSerPost = require("./models/JSerPost");

var _modelsJSerPost2 = _interopRequireDefault(_modelsJSerPost);

var _modelsJSerWeek = require("./models/JSerWeek");

var _modelsJSerWeek2 = _interopRequireDefault(_modelsJSerWeek);

var _algoAlgoItem = require("./algo/AlgoItem");

var _algoAlgoItem2 = _interopRequireDefault(_algoAlgoItem);

var _algoAlgoPostJs = require("./algo/AlgoPost.js");

var _algoAlgoPostJs2 = _interopRequireDefault(_algoAlgoPostJs);

var _naturalNaturalSearcher = require("./natural/NaturalSearcher");

var _naturalNaturalSearcher2 = _interopRequireDefault(_naturalNaturalSearcher);

require("array.prototype.find");

function filterJSerCategory(article) {
    return /jser/i.test(article.category);
}

var JSerStat = (function () {
    function JSerStat(rawItems, rawPosts) {
        _classCallCheck(this, JSerStat);

        this._rawItems = rawItems;
        this._rawPosts = rawPosts;
        /** @type {JSerItem[]} */
        this.items = this._rawItems.map(function (item) {
            return new _modelsJSerItem2["default"](item);
        });
        // JSer カテゴリだけにする
        /** @type {JSerPost[]} */
        this.posts = this._rawPosts.filter(filterJSerCategory).map(function (post, index) {
            return new _modelsJSerPost2["default"](index + 1, post);
        });
        /**
         *
         * @type {JSerWeek[]}
         * @private
         */
        this._weeks = [];
        /**
         *  @type {AlgoItem}
         *  @private
         **/
        this._algoItem = new _algoAlgoItem2["default"](this.items);
        /**
         * @type {AlgoPost}
         * @private
         */
        this._algoPost = new _algoAlgoPostJs2["default"](this.posts);
        /**
         * @type {NaturalSearcher}
         */
        this.naturalSearch = null;
    }

    /**
     * 全部で何週あるかを返す(投稿記事の数と一致)
     * @returns {number}
     */

    JSerStat.prototype.getTotalWeekCount = function getTotalWeekCount() {
        return this.posts.length;
    };

    /**
     * beginからendの範囲のJSerItemの配列を返す
     * @param {Date} beginDate
     * @param {Date} endDate
     * @returns {JSerItem[]}
     */

    JSerStat.prototype.findItemsBetween = function findItemsBetween(beginDate, endDate) {
        return this._algoItem.findItemsBetween(beginDate, endDate);
    };

    // deprecated

    JSerStat.prototype.getItemsBetWeen = function getItemsBetWeen(beginDate, endDate) {
        return this.findItemsBetween(beginDate, endDate);
    };

    /**
     * 全てのJSerWeekの配列を返す
     * @returns {JSerWeek[]}
     */

    JSerStat.prototype.getJSerWeeks = function getJSerWeeks() {
        var _this = this;

        if (this._weeks.length === 0) {
            this._weeks = this.posts.reduce(function (results, currentPost, index) {
                var prevPost = _this.posts[index - 1];
                var jserWeek = new _modelsJSerWeek2["default"](currentPost, prevPost, _this._algoItem);
                results.push(jserWeek);
                return results;
            }, []);
        }
        return this._weeks;
    };

    /**
     * beginからendの範囲のJSerWeekの配列を返す
     * @param {Date} beginDate
     * @param {Date} endDate
     * @returns {JSerWeek[]}
     */

    JSerStat.prototype.findJSerWeeksBetween = function findJSerWeeksBetween(beginDate, endDate) {
        var _this2 = this;

        var algoPost = this._algoPost;
        var posts = algoPost.findPostsBetween(beginDate, endDate);
        return posts.reduce(function (results, currentPost, index) {
            var prevPost = _this2.posts[index - 1];
            var jserWeek = new _modelsJSerWeek2["default"](currentPost, prevPost, _this2._algoItem);
            results.push(jserWeek);
            return results;
        }, []);
    };

    // deprecated

    JSerStat.prototype.getJSerWeeksBetWeen = function getJSerWeeksBetWeen(beginDate, endDate) {
        return this.findJSerWeeksBetween(beginDate, endDate);
    };

    /**
     * JSer.info #xxx を返す
     * @param {number} number number start with 1
     * @returns {JSerWeek}
     */

    JSerStat.prototype.findJSerWeek = function findJSerWeek(number) {
        if (number <= 0) {
            throw new Error("number:" + number + " should be >= 1");
        }
        if (number > this.posts.length) {
            return null;
        }
        var targetPost = this.posts[number - 1];
        var prevPost = this.posts[number - 2];
        return new _modelsJSerWeek2["default"](targetPost, prevPost, this._algoItem);
    };

    // deprecated

    JSerStat.prototype.getJSerWeek = function getJSerWeek(number) {
        return this.findJSerWeek(number);
    };

    /**
     * JSerItemを含んでいるJSerWeekを検索して返す.
     * @param {Object} jserItem the jserItem is raw object for JSerItem
     * @return {JSerWeek|null} The week contain this jserItem.
     * 未来の記事などJSerWeekに所属していない場合もある
     */

    JSerStat.prototype.findWeekWithItem = function findWeekWithItem(jserItem) {
        var targetItem = new _modelsJSerItem2["default"](jserItem);
        var tenDaysAfter = new Date(targetItem.date);
        tenDaysAfter.setDate(targetItem.date.getDate() + 12);
        var jSerWeeks = this.findJSerWeeksBetween(targetItem.date, tenDaysAfter);
        return jSerWeeks.find(function (week) {
            if (week.post.date < targetItem.date) {
                return false;
            }
            return week.items.some(function (item) {
                return targetItem.isEqualItem(item);
            });
        });
    };

    /**
     * URLとマッチするJSerItemを返す
     * @param {string} URL
     * @return {JSerItem}
     */

    JSerStat.prototype.findItemWithURL = function findItemWithURL(URL) {
        return this.items.find(function (item) {
            return item.url === URL;
        });
    };

    /**
     * `item` と関連するJSerItemの配列を返す
     * @param {JSerItem} item
     * @param {number} limit
     * @returns {JSerItem[]}
     */

    JSerStat.prototype.findRelatedItems = function findRelatedItems(item) {
        var limit = arguments[1] === undefined ? 10 : arguments[1];

        if (this.naturalSearch == null) {
            this.naturalSearch = new _naturalNaturalSearcher2["default"](this.items);
        }
        return this.naturalSearch.findRelatedItems(item, limit);
    };

    return JSerStat;
})();

exports["default"] = JSerStat;
module.exports = exports["default"];
//# sourceMappingURL=JSerStat.js.map