{"version":3,"sources":["../src/material-container.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAGb,SAAS,mBAAmB,CAAC,CAAC,EAAE;AAC5B,0BACI,CAAC,CAAC,SAAS,EACX,mEAAmE,CACtE,CAAC;AACF,0BACI,CAAC,CAAC,cAAc,EAChB,wEAAwE,CAC3E,CAAC;CACL;;IAEoB,SAAS;aAAT,SAAS;8BAAT,SAAS;;;iBAAT,SAAS;;;;;;;;+BAMZ,IAAI,EAAE;AAChB,+BAAmB,CAAC,IAAI,CAAC;;AAAC;gBAEpB,kBAAkB;0BAAlB,kBAAkB;;AACpB,yBADE,kBAAkB,CACR,KAAK,EAAE;0CADjB,kBAAkB;;uFAAlB,kBAAkB,aAEV,KAAK;;AACX,0BAAK,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC;;AAAC,AAE9C,0BAAK,wBAAwB,GAAG,EAAE,CAAC;;iBACtC;;6BANC,kBAAkB;;wDAQA;;;AAChB,uDATF,kBAAkB,yCASa;AACzB,uDAVN,kBAAkB,mDAUc;yBAC7B;;AAED,4BAAI,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;;;AAAC,AAG9B,4BAAI,OAAO,GAAG,KAAK,CAAC;AACpB,4BAAI,UAAU,GAAG,SAAb,UAAU,GAAS;AACnB,mCAAO,GAAG,IAAI,CAAC;yBAClB;;;;AAAC,AAIF,4BAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,GAAG,CACtC,UAAA,KAAK;mCAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC;yBAAA,CACtC;;;;AAAC,AAIF,4BAAI,QAAQ,GAAG,SAAX,QAAQ,GAAS;AACjB,gCAAI,OAAO,EAAE;AACT,uCAAK,QAAQ,CAAC,UAAA,SAAS,EAAI;AACvB,2CAAO,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,OAAK,KAAK,CAAC,CAAC;iCACrD,CAAC,CAAC;6BACN;AACD,mCAAO,GAAG,KAAK,CAAC;yBACnB,CAAC;AACF,4BAAI,CAAC,WAAW,GAAG,kBA3D3B,UAAU,CA2DgC,MAAM,EAAE,QAAQ,CAAC,CAAC;qBACvD;;;8DAEyB,SAAS,EAAE,WAAW,EAAE;AAC9C,uDAzCF,kBAAkB,iDAyCqB;AACjC,uDA1CN,kBAAkB,2DA0CoB,SAAS,EAAE,WAAW,EAAE;yBAC3D;;;AAAA,AAGD,4BAAI,CAAC,QAAQ,CAAC,UAAA,SAAS;mCAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC;yBAAA,CAAC,CAAC;qBACzE;;;2DAEsB;AACnB,uDAlDF,kBAAkB,4CAkDgB;AAC5B,uDAnDN,kBAAkB,sDAmDiB;yBAChC;;AAED,4BAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;AAC3B,4BAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAA,mBAAmB,EAAI;AACzD,+CAAmB,EAAE,CAAC;yBACzB,CAAC,CAAC;AACH,4BAAI,CAAC,wBAAwB,GAAG,EAAE,CAAC;qBACtC;;;uBA3DC,kBAAkB;eAAS,IAAI;;;;AA+DrC,gBAAI,aAAa,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC;AAClD,8BAAkB,CAAC,WAAW,GAAG,YAAY,GAAG,aAAa,GAAG,GAAG,CAAC;AACpE,mBAAO,kBAAkB,CAAC;SAC7B;;;WA3EgB,SAAS;;;kBAAT,SAAS","file":"material-container.js","sourcesContent":["// LICENSE : MIT\n// Original from http://facebook.github.io/flux/docs/flux-utils.html#container\n// This Container depended on https://github.com/azu/material-flux\n\"use strict\";\nimport {StoreGroup} from \"material-flux\";\nimport assert from \"assert\";\nfunction assertBaseComponent(o) {\n    assert(\n        o.getStores,\n        'Components that use Container must implement `static getStores()`'\n    );\n    assert(\n        o.calculateState,\n        'Components that use Container must implement `static calculateState()`'\n    );\n}\n\nexport default class Container {\n    /**\n     * Create Container of Base Component and return Container Component.\n     * @param Base\n     * @returns {React.Component}\n     */\n    static create(Base) {\n        assertBaseComponent(Base);\n        // define as Container class\n        class ContainerComponent extends Base {\n            constructor(props) {\n                super(props);\n                this.state = Base.calculateState(null, props);\n                // initialize\n                this._StoreRemoveEventListers = [];\n            }\n\n            componentDidMount() {\n                if (super.componentDidMount) {\n                    super.componentDidMount();\n                }\n\n                var stores = Base.getStores();\n\n                // This tracks when any store has changed and we may need to update.\n                var changed = false;\n                var setChanged = () => {\n                    changed = true;\n                };\n\n                // This adds subscriptions to stores. When a store changes all we do is\n                // set changed to true.\n                this._StoreRemoveEventListers = stores.map(\n                    store => store.onChange(setChanged)\n                );\n\n                // This callback is called after the dispatch of the relevant stores. If\n                // any have reported a change we update the state, then reset changed.\n                var callback = () => {\n                    if (changed) {\n                        this.setState(prevState => {\n                            return Base.calculateState(prevState, this.props);\n                        });\n                    }\n                    changed = false;\n                };\n                this._storeGroup = new StoreGroup(stores, callback);\n            }\n\n            componentWillReceiveProps(nextProps, nextContext) {\n                if (super.componentWillReceiveProps) {\n                    super.componentWillReceiveProps(nextProps, nextContext);\n                }\n                // TODO: pure options?\n                // Finally update the state using the new props.\n                this.setState(prevState => Base.calculateState(prevState, nextProps));\n            }\n\n            componentWillUnmount() {\n                if (super.componentWillUnmount) {\n                    super.componentWillUnmount();\n                }\n\n                this._storeGroup.release();\n                this._StoreRemoveEventListers.forEach(removeEventListener => {\n                    removeEventListener();\n                });\n                this._StoreRemoveEventListers = [];\n            }\n        }\n\n        // Update the name of the container before returning.\n        var componentName = Base.displayName || Base.name;\n        ContainerComponent.displayName = 'Container(' + componentName + ')';\n        return ContainerComponent;\n    }\n}\n"]}